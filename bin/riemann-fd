#!/usr/bin/env ruby

# Reports current file descriptor use to riemann.
# By default reports the total system fd usage, can also report usage of processes

require File.expand_path('../../lib/riemann/tools', __FILE__)

class Riemann::Tools::Health
  include Riemann::Tools

  opt :fd_sys_warning, "open file descriptor threshold for system (%)", :default => 75
  opt :fd_sys_critical, "open file descriptor critical threshold for system (%)", :default => 90
  opt :fd_proc_warning, "open file descriptor threshold for process (%)", :default => 75
  opt :fd_proc_critical, "open file descriptor critical threshold for process (%)", :default => 90
  opt :processes, "verify running processes to measure fd usage in addition to system total", :default => false

  def initialize
    @limits = {
      :fd => {:critical => opts[:fd_sys_critical], :warning => opts[:fd_sys_warning]},
      :process => {:critical => opts[:fd_proc_critical], :warning => opts[:fd_proc_warning]},
    }
    ostype = `uname -s`.chomp.downcase
    puts "WARNING: OS '#{ostype}' not explicitly supported. Falling back to Linux" unless ostype == "linux"
    @fd = method :linux_fd
  end

  def alert(service, state, metric, description)
    report(
      :service => service.to_s,
      :state => state.to_s,
      :metric => metric.to_f,
      :description => description
    )
  end

  def linux_fd
    sys_used, sys_max = `cat /proc/sys/fs/file-nr | awk '{print $1 "\t" $3}'`.split
    sys_used_p = Float(sys_used) / Float(sys_max) * 100.0

    if sys_used_p >= @limits[:fd][:critical]
      alert "fd sys", :critical, sys_used, "system is using #{sys_used}/#{sys_max} fds"
    elsif sys_used_p >= @limits[:fd][:warning]
      alert "fd sys", :warning, sys_used, "system is using #{sys_used}/#{sys_max} fds"
    else
      alert "fd sys", :ok, sys_used, "system is using #{sys_used}/#{sys_max} fds"
    end

    unless opts[:processes].nil?
      `ps --ppid 2 -p 2 --deselect | awk '{print $1}'`.split.each do |process|
        if File.directory?("/proc/#{process}")
          used = Float(`ls -l /proc/#{process}/fd | wc -l`)
          max = Float(`cat /proc/#{process}/limits | grep -i 'Max open files' | awk '{print $4}'`)
          pid, name, cmd = `ps axo "%p|%c|%a" | grep -w #{process} | grep -v grep`.split('|')
          used_p = used / max * 100.0
          name.strip!
          cmd.strip!
          pid.strip!

          if used_p >= @limits[:process][:critical]
            alert "fd #{name} #{process}", :critical, used, "process #{name} #{process} is using #{used}/#{max} fds - (#{cmd})"
          elsif used_p >= @limits[:process][:warning]
            alert "fd #{name} #{process}", :warning, used, "process #{name} #{process} is using #{used}/#{max} fds - (#{cmd})"
          else
            alert "fd #{name} #{process}", :ok, used, "process #{name} #{process} is using #{used}/#{max} fds - (#{cmd})"
          end
        end
      end
    end
  end

  def tick
    @fd.call
  end
end

Riemann::Tools::Health.run
